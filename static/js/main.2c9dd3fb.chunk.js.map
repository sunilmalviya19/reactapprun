{"version":3,"sources":["Api.js","components/Product.js","App.js","serviceWorker.js","index.js"],"names":["WooCommerce","WooCommerceAPI","url","consumerKey","consumerSecret","wpAPI","verifySsl","version","Product","props","state","error","isLoaded","currentPage","category","items","that","this","getAsync","then","result","setState","JSON","parse","toJSON","body","getData","Object","entries","map","i","key","value","Col","xs","className","width","alt","src","images","name","price","Button","variant","Container","Row","productlist","Spinner","animation","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qfAYeA,EAVM,I,OAAIC,GAAe,CACtCC,IAAK,kCACLC,YAAa,8CACbC,eAAgB,8CAChBC,OAAO,EACPC,WAAW,EACXC,QAAS,UCuEIC,E,YAxER,WAAYC,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACVC,MAAO,KACPC,UAAU,EACVC,YAAa,EACbC,SAAU,GACVC,MAAO,IAPM,E,uEAarB,IAAMC,EAAOC,KACdjB,EAAYkB,SAAS,wBACnBC,MAAK,SAASC,GACdJ,EAAKK,SAAS,CACVT,UAAU,EACVG,MAAOO,KAAKC,MAAMH,EAAOI,SAASC,a,0CAOxCR,KAAKS,Y,oCAIL,OAAOC,OAAOC,QAAQX,KAAKP,MAAMK,OAAOc,KAAI,WAAeC,GAAO,IAAD,mBAAnBC,EAAmB,KAAdC,EAAc,KAE/D,OAGQ,kBAACC,EAAA,EAAD,CAAKF,IAAKA,EAAKG,GAAI,EAAGC,UAAU,gBAAhC,IAAgD,yBAAKJ,IAAKA,GACxD,yBAAKK,MAAM,OAAOC,IAAI,UAAUC,IAAKN,EAAMO,OAAO,GAAGD,MACrD,4BAAKN,EAAMQ,MACX,iCAAOR,EAAMS,OACZ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBR,UAAU,mBAA5C,sB,+BAgBR,OAAKlB,KAAKP,MAAME,SAMjB,kBAACgC,EAAA,EAAD,KACA,wBAAIT,UAAU,cAAd,qBACK,kBAACU,EAAA,EAAD,KACJ5B,KAAK6B,gBAPC,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASL,QAAQ,gB,GAzD5BM,aCSRC,MAVf,WACE,OAEE,yBAAKf,UAAU,OAEX,kBAAE,EAAF,QCEYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.2c9dd3fb.chunk.js","sourcesContent":["\nimport WooCommerceAPI from 'woocommerce-api';\nconst WooCommerce  = new WooCommerceAPI({\n  url: 'http://veronica.codingkloud.com', // Your store URL\n  consumerKey: 'ck_03e83242fdcbb62a01daebe9c4817741f4c18a36', // Your consumer secret\n  consumerSecret: 'cs_069ce05d83a89152f983fcdd2d4460c213256009', // Your consumer secret\n  wpAPI: true, // Enable the WP REST API integration\n  verifySsl: false,\n  version: 'wc/v1', // WooCommerce WP REST API version\n  \n});\n\nexport default WooCommerce;  ","import React, { Component } from 'react';\n//import WooCommerceAPI from 'woocommerce-api';\nimport { Col, Row, Container, Button, Spinner } from 'react-bootstrap';\nimport WooCommerce from '../Api';\n\n\n class Product extends Component {\n       constructor(props) {\n          super(props);\n          this.state = {\n             error: null,\n             isLoaded: false,\n             currentPage: 1,\n             category: [],\n             items: {}\n            \n          }\n        }\n\n  getData(){\n     const that = this;\n    WooCommerce.getAsync('products?per_page=36')\n     .then(function(result) {\n      that.setState({\n          isLoaded: true,\n          items: JSON.parse(result.toJSON().body),\n        })\n            \n      })\n  }\n\n  componentDidMount(){\n    this.getData();\n  }\n\n  productlist(){\n    return Object.entries(this.state.items).map(([key, value], i) => {\n\n      return (\n        \n        \n              <Col key={key} xs={3} className=\"product_item\"> <div key={key}>\n                <img width=\"100%\" alt=\"product\" src={value.images[0].src} />\n                <h4>{value.name}</h4>\n                <h6> ${value.price}</h6>\n                 <Button variant=\"outline-primary\" className=\"add_to_cart_btn\">Add to cart</Button>\n              \n                  </div>\n              </Col>\n             \n          \n                 \n           \n      )\n    })\n  }\n  \n//render  list\n  render () {\n         \n        // console.log(this.state);\n         if (!this.state.isLoaded) {\n            return (\n               <Spinner animation=\"border\" variant=\"primary\" />\n            );\n         }\n                  return(\n        <Container>\n        <h3 className=\"store_head\">WooCommerce Store</h3>\n             <Row>\n        {this.productlist()}\n        </Row>\n            \n          </Container>\n    )\n               \n        }\n    }\n\nexport default Product;","import React from 'react';\nimport './App.css';\nimport Product from './components/Product';\n\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      \n        < Product />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}